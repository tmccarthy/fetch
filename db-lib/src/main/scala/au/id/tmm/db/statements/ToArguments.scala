package au.id.tmm.db.statements

// TODO this one might be a good candidate for having implicit uses
trait ToArguments[-A] {

  def toArguments(a: A): Arguments

  def contraMap[B](f: B => A): ToArguments[B] = b => toArguments(f(b))

}

object ToArguments extends ToArgumentsForProducts {

  def apply[A : ToArguments]: ToArguments[A] = implicitly

  implicit def forSingleValue[A : ArgumentBinder]: ToArguments[A] = a => Arguments.of(Argument(a))

}

private[statements] trait ToArgumentsForProducts {
  // format: off
  implicit def forProduct22[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder, A18: ArgumentBinder, A19: ArgumentBinder, A20: ArgumentBinder, A21: ArgumentBinder, A22: ArgumentBinder]: ToArguments[Product22[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17), Argument(t._18), Argument(t._19), Argument(t._20), Argument(t._21), Argument(t._22))
  implicit def forProduct21[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder, A18: ArgumentBinder, A19: ArgumentBinder, A20: ArgumentBinder, A21: ArgumentBinder]: ToArguments[Product21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17), Argument(t._18), Argument(t._19), Argument(t._20), Argument(t._21))
  implicit def forProduct20[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder, A18: ArgumentBinder, A19: ArgumentBinder, A20: ArgumentBinder]: ToArguments[Product20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17), Argument(t._18), Argument(t._19), Argument(t._20))
  implicit def forProduct19[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder, A18: ArgumentBinder, A19: ArgumentBinder]: ToArguments[Product19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17), Argument(t._18), Argument(t._19))
  implicit def forProduct18[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder, A18: ArgumentBinder]: ToArguments[Product18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17), Argument(t._18))
  implicit def forProduct17[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder, A17: ArgumentBinder]: ToArguments[Product17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16), Argument(t._17))
  implicit def forProduct16[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder, A16: ArgumentBinder]: ToArguments[Product16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15), Argument(t._16))
  implicit def forProduct15[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder, A15: ArgumentBinder]: ToArguments[Product15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14), Argument(t._15))
  implicit def forProduct14[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder, A14: ArgumentBinder]: ToArguments[Product14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13), Argument(t._14))
  implicit def forProduct13[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder, A13: ArgumentBinder]: ToArguments[Product13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12), Argument(t._13))
  implicit def forProduct12[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder, A12: ArgumentBinder]: ToArguments[Product12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11), Argument(t._12))
  implicit def forProduct11[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder, A11: ArgumentBinder]: ToArguments[Product11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10), Argument(t._11))
  implicit def forProduct10[A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder, A10: ArgumentBinder]: ToArguments[Product10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9), Argument(t._10))
  implicit def forProduct9 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder, A9: ArgumentBinder]: ToArguments[Product9[A1, A2, A3, A4, A5, A6, A7, A8, A9]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8), Argument(t._9))
  implicit def forProduct8 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder, A8: ArgumentBinder]: ToArguments[Product8[A1, A2, A3, A4, A5, A6, A7, A8]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7), Argument(t._8))
  implicit def forProduct7 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder, A7: ArgumentBinder]: ToArguments[Product7[A1, A2, A3, A4, A5, A6, A7]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6), Argument(t._7))
  implicit def forProduct6 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder, A6: ArgumentBinder]: ToArguments[Product6[A1, A2, A3, A4, A5, A6]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5), Argument(t._6))
  implicit def forProduct5 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder, A5: ArgumentBinder]: ToArguments[Product5[A1, A2, A3, A4, A5]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4), Argument(t._5))
  implicit def forProduct4 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder, A4: ArgumentBinder]: ToArguments[Product4[A1, A2, A3, A4]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3), Argument(t._4))
  implicit def forProduct3 [A1: ArgumentBinder, A2: ArgumentBinder, A3: ArgumentBinder]: ToArguments[Product3[A1, A2, A3]] = t => Arguments.of(Argument(t._1), Argument(t._2), Argument(t._3))
  implicit def forProduct2 [A1: ArgumentBinder, A2: ArgumentBinder]: ToArguments[Product2[A1, A2]] = t => Arguments.of(Argument(t._1), Argument(t._2))
  implicit def forProduct1 [A1: ArgumentBinder]: ToArguments[Product1[A1]] = t => Arguments.of(Argument(t._1))
  // format: on
}
